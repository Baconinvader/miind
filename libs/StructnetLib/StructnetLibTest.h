// Copyright (c) 2005 - 2011 Marc de Kamps
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
//      and/or other materials provided with the distribution.
//    * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software 
//      without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY 
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF 
// USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//      If you use this software in work leading to a scientific publication, you should cite
//      the 'currently valid reference', which can be found at http://miind.sourceforge.net
#ifndef _CODE_LIBS_STRUCTNET_STRUCTNETLIBTEST_INCLUDE_GUARD
#define _CODE_LIBS_STRUCTNET_STRUCTNETLIBTEST_INCLUDE_GUARD

#ifdef WIN32
#pragma warning(disable: 4786)
#endif

#include "../UtilLib/UtilLib.h"
#include "../ConnectionismLib/ConnectionismLib.h"
#include "SparseLayeredNet.h"

using std::string;
using NetLib::SigmoidParameter;
using UtilLib::Index;
using UtilLib::LogStream;
using UtilLib::Number;
using ConnectionismLib::TrainingUnit;


namespace StructnetLib
{
	//! Test class for the StructnetLib library
	class StructNetLibTest : public LogStream
	{
	public:

		StructNetLibTest
		(
		);

		StructNetLibTest
		(
			boost::shared_ptr<ostream>,
			const string& = ""
		);

		bool Execute();

		//! This is a small version of the standard feedfoward networks that are
		//! used in van der Velde & de Kamps (2001). The input layer is defined
		//! in LAYER0 and subsequent layers in LAYERi. This network is able to
		//! accept the patterns that are generated by  GenerateTrainingUnits.
		SpatialConnectionistNet 
			GenerateNet
			(
				const SigmoidParameter&
			) const;

		//! This generates small training patterns which can be applied to the
		//! network, created by GenerateNet.
		vector<TrainingUnit<double> >
			   GenerateTestTrainingUnits () const;

		bool   GenerateStructuredNet		();
	private:

		// Create 16 Patterns, to be used as input patterns
		// for training. Writes output files:
		vector<D_Pattern> GeneratePatterns () const;

		bool   OrientedPatternStreamTest	() const;
		bool   OrientedTranslationTest		() const;
		bool   StructuredNetTest			() const; 
		bool   NodeSizeTest					() const;
		bool   InputFromTest				() const;
		bool   ReverseNetTest				() const;
		bool   ReverseNetFromDiskTest		() const;
		bool   FullyConnectedTest			() const;
		bool   ForwardOrderTest				() const;
		bool   ReverseOrderTest				() const;
		bool   RZOrderTest					() const;
		bool   LayerIteratorTest			() const;

		// Auxilliary functions:

		bool   StorePatternsOnDisk         
				(
					const vector<D_Pattern>&
				) const;

		string CreateInputFileName         (Index) const;

		D_Pattern 
			   GetOutputPatternForThisInputFile(Index) const;

		const string _path_name;
	};

} // end of Strucnet

#endif // include guard
