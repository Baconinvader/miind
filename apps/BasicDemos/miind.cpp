//Machine-generated by miind.py. Edit at your own risk.

#include <boost/timer/timer.hpp>
#include <GeomLib.hpp>
#include <MPILib/include/MPINetworkCode.hpp>
#include <MPILib/include/algorithm/RateAlgorithmCode.hpp>
#include <MPILib/include/SimulationRunParameter.hpp>
#include <MPILib/include/report/handler/RootReportHandler.hpp>
#include <MPILib/include/algorithm/WilsonCowanAlgorithm.hpp>
#include <MPILib/include/algorithm/DelayAlgorithmCode.hpp>
#include <MPILib/include/algorithm/RateFunctorCode.hpp>
typedef MPILib::MPINetwork<MPILib::DelayedConnection, MPILib::utilities::CircularDistribution> Network;
int main(int argc, char *argv[]){
	Network network;
	boost::timer::auto_cpu_timer t;

#ifdef ENABLE_MPI
	// initialise the mpi environment this cannot be forwarded to a class
	boost::mpi::environment env(argc, argv);
#endif

	try {	// generating algorithms
	const MPILib::Potential v_min_0 = -0.02;
	const MPILib::Number n_bins_0 = 500;
	GeomLib::NeuronParameter par_neur_0(1.0,0,0,0,50e-3);
	const GeomLib::InitialDensityParameter par_dense_0(0.0, 0.0);
	GeomLib::OdeParameter par_ode_0(n_bins_0,v_min_0,par_neur_0,par_dense_0);
	GeomLib::LifNeuralDynamics dyn_ode_leak_0(par_ode_0, 0.01);
	GeomLib::LeakingOdeSystem sys_ode_0(dyn_ode_leak_0);
	GeomLib::GeomParameter par_geom_0(sys_ode_0);
	GeomLib::GeomAlgorithm<DelayedConnection> alg_geom_0(par_geom_0);

	MPILib::algorithm::RateAlgorithm<DelayedConnection> rate_alg_1(1.0);
	// generating nodes
	MPILib::NodeId id_0 = network.addNode(alg_geom_0,MPILib::EXCITATORY_GAUSSIAN);
	MPILib::NodeId id_1 = network.addNode(rate_alg_1,MPILib::EXCITATORY_GAUSSIAN);
	// generating connections
	DelayedConnection con_1_0(800,0.03,0);
	network.makeFirstInputOfSecond(id_1,id_0,con_1_0);
	// generation simulation parameter
	const MPILib::Time tmin = 0;
	const MPILib::Time tmax = 0.3;
	const MPILib::Rate fmin = 0;
	const MPILib::Rate fmax = 20;
	const MPILib::Potential statemin = 0;
	const MPILib::Potential statemax = 1.0;
	const MPILib::Potential densemin = 0;
	const MPILib::Potential densemax = 2.5;
	MPILib::CanvasParameter par_canvas(tmin,tmax,fmin,fmax,statemin,statemax,densemin,densemax);

	MPILib::report::handler::RootReportHandler handler("omurtag",true,true, par_canvas);
	handler.addNodeToCanvas(id_0);
	SimulationRunParameter par_run( handler,1000000,0,0.3,1e-03,1e-05,"omurtag.log",1e-03);
	network.configureSimulation(par_run);
	network.evolve();
	} catch(std::exception exc){
		std::cout << exc.what() << std::endl;
#ifdef ENABLE_MPI
	//Abort the MPI environment in the correct way :
	env.abort(1);
#endif
	}

	MPILib::utilities::MPIProxy().barrier();
	t.stop();
	if (MPILib::utilities::MPIProxy().getRank() == 0) {

		std::cout << "Overall time spend\n";
		t.report();
	}
	return 0;
}
