//Machine-generated by miind.py. Edit at your own risk.

#include <GeomLib.hpp>
#include <MPILib/include/MPINetworkCode.hpp>
#include <MPILib/include/algorithm/RateAlgorithmCode.hpp>
#include <MPILib/include/SimulationRunParameter.hpp>
#include <MPILib/include/report/handler/RootReportHandler.hpp>
#include <MPILib/include/algorithm/WilsonCowanAlgorithm.hpp>
#include <MPILib/include/algorithm/DelayAlgorithmCode.hpp>
#include <MPILib/include/algorithm/RateFunctorCode.hpp>

typedef MPILib::MPINetwork<double, MPILib::utilities::CircularDistribution> Network;
int main(){
	Network network;
	// generating algorithms
	const MPILib::Time t_mem_0 = 50e-3;
	const double f_noise_0 = 1.0;
	MPILib::Rate f_max_0 = 10.0;
	MPILib::Rate I_ext_0 = 0;
	MPILib::algorithm::WilsonCowanParameter  par_wil_0(t_mem_0,f_max_0,f_noise_0,I_ext_0);
	MPILib::algorithm::WilsonCowanAlgorithm alg_wc_0(par_wil_0);
	MPILib::Rate RateFunction_1(MPILib::Time);
	MPILib::algorithm::RateFunctor<double> rate_functor_1(RateFunction_1);
	// generating nodes
	MPILib::NodeId id_0 = network.addNode(alg_wc_0,MPILib::EXCITATORY_GAUSSIAN);
	MPILib::NodeId id_1 = network.addNode(rate_functor_1,MPILib::EXCITATORY_GAUSSIAN);
	// generating connections
	double con_1_0(0.1);
	network.makeFirstInputOfSecond(id_1,id_0,con_1_0);
	// generation simulation parameter
	MPILib::report::handler::RootReportHandler handler("wilsoncowan",true);
	SimulationRunParameter par_run( handler,1000000,0,0.3,1e-05,1e-05,"wilson.log",1e-03);
	network.configureSimulation(par_run);
	network.evolve();
	return 0;
}
MPILib::Rate RateFunction_1(MPILib::Time t){
	return 100.0*sin(100e-3*t) + 100.0;
}
