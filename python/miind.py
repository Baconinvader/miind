import sys
import include
import algorithms
import nodes
import connections
import xml.etree.ElementTree as ET

XML_EXTENSION = '.xml'

# Nothing too fancy for the weight type

WEIGHTTYPES = ['double', 'DelayedConnection']


def generate_preamble(outfile):
    outfile.write('//Machine-generated by miind.py. Edit at your own risk.\n\n')
    for inc in include.includes:
        outfile.write(inc +'\n')
    outfile.write('\n')
    return

def generate_closing(outfile):
    outfile.write('\treturn 0;\n}\n')
    return

def check_call(argv):   
    if len(argv) != 2:
        raise ValueError
    if argv[1][-4:] != XML_EXTENSION:
        raise ValueError

    infile = open (argv[1],'r')
    outname=argv[1][:len(argv[1])-len(XML_EXTENSION)]
    outfile= open('../apps/BasicDemos/' + outname + '.cpp','w') 

    return infile, outfile

def define_network_type(outfile, type):
    if type ==  "DelayedConnection":
        s = "MPILib::" + type
    else:
        s = "double"
    return 'typedef MPILib::MPINetwork<' + s + ', MPILib::utilities::CircularDistribution> Network;\n'

def parse_xml(infile, outfile):
    tree=ET.fromstring(infile.read())
    m=tree.find('WeightType')
    s = m.text
    return define_network_type(outfile,s), tree

def generate_opening(outfile):
    outfile.write('int main(){\n\tNetwork network;\n')
    
if __name__ == "__main__":
    infile, outfile=check_call(sys.argv)
    generate_preamble(outfile)
    nettype, tree = parse_xml(infile,outfile)
    outfile.write(nettype)
    alg_list = tree.findall('Algorithms/AbstractAlgorithm')
    weighttype = tree.find('WeightType')
    generate_opening(outfile)
    outfile.write('\t// generating algorithms\n')
    algorithms.parse_algorithms(alg_list,weighttype,outfile)
    node_list = tree.findall('Nodes/Node')
    outfile.write('\t// generating nodes\n')
    nodes.parse_nodes(node_list,weighttype,outfile)
    outfile.write('\t// generating connections\n')
    connection_list = tree.findall('Connections/Connection')
    connections.parse_connections(connection_list,weighttype,outfile)
    generate_closing(outfile)
