// Copyright (c) 2005 - 2010 Marc de Kamps
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
//      and/or other materials provided with the distribution.
//    * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software 
//      without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY 
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF 
// USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//      If you use this software in work leading to a scientific publication, you should cite
//      the 'currently valid reference', which can be found at http://miind.sourceforge.net

#ifndef _CODE_LIBS_CLAMLIB_ABSTRACTCIRCUITCREATOR_INCLUDE_GUARD
#define _CODE_LIBS_CLAMLIB_ABSTRACTCIRCUITCREATOR_INCLUDE_GUARD

#include "../DynamicLib/DynamicLib.h"
#include "CircuitDescription.h"
#include "CircuitInfo.h"
#include "LocalDefinitions.h"

using DynamicLib::D_DynamicNetwork;

namespace ClamLib {

	//!Instances of this class create a Circuit which corresponds to a NodeId or a PhysicalPosition
	//!
	//! Examples are: the expansion of the PerceptronCircuit or the creation of DisInhibitionCircuit s
	//! For every NodeId or SpatialPosition in an Artificial Neural Network, there is at least one corresponding
	//! NodeId, but there may be more. CircuitInfo keeps track of this, so storing a vector<CircuitInfo> means
	//! that one can trace back the NodeId s generated by the CircuitCreator to the original NodeId or
	//! PhysicalPosition. In the CircuitInfo object we also store a RootCircuitCreatorProxy, which is stateless,
	//! but reminds the CircuitInfo of which CircuitCreator was used in the creation process. The proxy is necessary
	//! because AbstractCircuitCreator does not derive from TObject (The "ROOT barrier")
	class AbstractCircuitCreator
	{
	public:

		AbstractCircuitCreator(D_DynamicNetwork*);

		virtual ~AbstractCircuitCreator() = 0;

		virtual void AddNodes
		(
			NodeId,
			CircuitInfo*
		) = 0;

		virtual void AddWeights
		(
			const CircuitInfo&,
			const CircuitInfo&,
			ClamLib::Efficacy
		) = 0;

		virtual AbstractCircuitCreator* Clone() const = 0;

		virtual Number NumberOfNodes() const = 0;

		virtual string Name() const = 0;

		virtual CircuitDescription Description() const = 0;

	};

}
#endif // include guard
