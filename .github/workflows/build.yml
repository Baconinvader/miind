name: Build

on: [push]

jobs: 
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, windows-2019] # macos-10.15 windows-2019
        include:
          - os: windows-2019
          - os: ubuntu-18.04
          #- os: macos-10.15
          #  triplet: x64-osx-mixed
          #  vcpkgCommitId: '30124253eecff36bc90f73341edbfb4f845e2a1e'
            
    env:
      buildDir: '${{ github.workspace }}/build'
      #CIBW_BUILD: cp36-manylinux_x86_64 cp37-manylinux_x86_64 cp38-manylinux_x86_64 cp39-manylinux_x86_64 cp36-win_amd64 cp37-win_amd64 cp38-win_amd64 cp39-win_amd64
      CIBW_BUILD: cp38-manylinux_x86_64 cp38-win_amd64
      CIBW_MANYLINUX_X86_64_IMAGE: quay.io/pypa/manylinux2014_x86_64:latest
      CIBW_BEFORE_BUILD: pip install scikit-build build auditwheel numpy matplotlib==3.2 scipy shapely descartes
      CIBW_BEFORE_BUILD_LINUX: |
        yum install -y wget python36-devel ninja-build boost-devel pugixml-devel freeglut-devel yum install centos-release-scl-rh
        yum --enablerepo=centos-sclo-rh-testing install rh-python38-python-devel
      CIBW_BEFORE_BUILD_WINDOWS: |
        choco install visualstudio2017community ninja -f -y
        choco install visualstudio2017-workload-nativedesktop -f -y
      CIBW_BUILD_VERBOSITY: 1
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          
      - uses: lukka/get-cmake@latest

      - name: Ubuntu - install packages required for freeglut and fftw3
        run: |
          sudo apt-get install libxi-dev libgl1-mesa-dev libglu1-mesa-dev mesa-common-dev libxrandr-dev libxxf86vm-dev
          sudo apt-get install fftw3-dev
        if: contains( matrix.os, 'ubuntu')

      - name: MacOS - install xquartz for GL support, fftw, and llvm for OpenMP support
        run: brew install gcc xquartz fftw llvm libomp pkg-config
        if: contains( matrix.os, 'macos')

      - name: dir
        run: find $RUNNER_TEMP
        shell: bash
      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash

      - run: |
            cp custom-triplets/*.cmake vcpkg/triplets
        shell: bash
        
      - name: Install vcpkg
        # Download and build vcpkg, without installing any port. If content is cached already, it is a no-op.
        uses: lukka/run-vcpkg@v6
        with:
          setupOnly: true
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed
          appendedCacheKey: ${{matrix.os}}-build-vcpkg-v2-${{ hashFiles( '**/vcpkg.json' ) }}
          vcpkgTriplet: ${{ matrix.triplet }}
          doNotCache: true

      - name: Run CMake with vcpkg.json manifest
        uses: lukka/run-cmake@main
        with:
          cmakeListsOrSettingsJson: CMakeSettingsJson
          cmakeSettingsJsonPath: '${{ github.workspace }}/CMakeSettings.json'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ env.buildDir }}'
          cmakeAppendedArgs: '"-GNinja" -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet}}'
          buildWithCMake: true

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
          
      - name: Install cibuildwheel
        run: |
          python -m pip install twine cibuildwheel==1.8.0

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
            
      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl    
          
      - name: Publish package
        if: github.event_name == 'push' # && startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          #password: ${{ secrets.PYPI_TEST_API_TOKEN }} Add once we can create a secret
          password: pypi-AgENdGVzdC5weXBpLm9yZwIkOGUzMWI0OGYtZjE0ZS00ZGUzLTkxNjEtZmYzZWJkODEyYzgwAAIleyJwZXJtaXNzaW9ucyI6ICJ1c2VyIiwgInZlcnNpb24iOiAxfQAABiA5aJXbljJQ0NQRu5Wn9f3v4CB35xhwzauoq72exCLs4A
          packages_dir: ./wheelhouse/
          repository_url: https://test.pypi.org/legacy/
          
      - name: pip install miind
        run: pip install --index-url https://test.pypi.org/simple/ --no-deps miind-test-hugh-osborne
        shell: bash
        
      - name: Integration Tests
        run: python -m miind.system_tests
        shell: bash