//Machine-generated by miind.py. Edit at your own risk.

#include <GeomLib.hpp>
#include <MPILib/include/MPINetworkCode.hpp>
#include <MPILib/include/algorithm/RateAlgorithmCode.hpp>
#include <MPILib/include/SimulationRunParameter.hpp>
#include <MPILib/include/report/handler/RootReportHandler.hpp>
#include <MPILib/include/algorithm/WilsonCowanAlgorithm.hpp>
#include <MPILib/include/algorithm/DelayAlgorithmCode.hpp>
#include <MPILib/include/algorithm/RateFunctorCode.hpp>

typedef MPILib::MPINetwork<MPILib::DelayedConnection, MPILib::utilities::CircularDistribution> Network;
int main(){
	Network network;
	// generating algorithms
	const MPILib::Potential v_min_0 = -0.02;
	const MPILib::Number n_bins_0 = 2200;
	GeomLib::NeuronParameter par_neur_0(20e-3,0,0,0,10e-3);
	const GeomLib::InitialDensityParameter par_dense_0(0.0, 0.0);
	GeomLib::OdeParameter par_ode_0(n_bins_0,v_min_0,par_neur_0,par_dense_0);
	GeomLib::LifNeuralDynamics dyn_ode_leak_0(par_ode_0, 0.01);
	GeomLib::LeakingOdeSystem sys_ode_0(dyn_ode_leak_0);
	GeomLib::GeomParameter par_geom_0(sys_ode_0);
	GeomLib::GeomAlgorithm<DelayedConnection> alg_geom_0(par_geom_0);

	const MPILib::Potential v_min_1 = -0.02;
	const MPILib::Number n_bins_1 = 2200;
	GeomLib::NeuronParameter par_neur_1(20e-3,0,0,0,3e-3);
	const GeomLib::InitialDensityParameter par_dense_1(0.0, 0.0);
	GeomLib::OdeParameter par_ode_1(n_bins_1,v_min_1,par_neur_1,par_dense_1);
	GeomLib::LifNeuralDynamics dyn_ode_leak_1(par_ode_1, 0.01);
	GeomLib::LeakingOdeSystem sys_ode_1(dyn_ode_leak_1);
	GeomLib::GeomParameter par_geom_1(sys_ode_1);
	GeomLib::GeomAlgorithm<DelayedConnection> alg_geom_1(par_geom_1);

	MPILib::algorithm::RateAlgorithm<DelayedConnection> rate_alg_2(2.0);
	// generating nodes
	MPILib::NodeId id_0 = network.addNode(alg_geom_0,MPILib::EXCITATORY_GAUSSIAN);
	MPILib::NodeId id_1 = network.addNode(alg_geom_1,MPILib::INHIBITORY_GAUSSIAN);
	MPILib::NodeId id_2 = network.addNode(rate_alg_2,MPILib::EXCITATORY_GAUSSIAN);
	// generating connections
	DelayedConnection con_0_0(10000,0.000117647,0);
	network.makeFirstInputOfSecond(id_0,id_0,con_0_0);
	DelayedConnection con_1_1(2000,-0.00085531,0);
	network.makeFirstInputOfSecond(id_1,id_1,con_1_1);
	DelayedConnection con_0_1(10000,0.000285103,0);
	network.makeFirstInputOfSecond(id_0,id_1,con_0_1);
	DelayedConnection con_1_0(2000,-0.000352941,0);
	network.makeFirstInputOfSecond(id_1,id_0,con_1_0);
	DelayedConnection con_2_0(10000,0.000117647,0);
	network.makeFirstInputOfSecond(id_2,id_0,con_2_0);
	DelayedConnection con_2_1(10000,0.000285103,0);
	network.makeFirstInputOfSecond(id_2,id_1,con_2_1);
	// generation simulation parameter
	const MPILib::Time tmin = 0;
	const MPILib::Time tmax = 0.05;
	const MPILib::Rate fmin = 0;
	const MPILib::Rate fmax = 10;
	const MPILib::Potential statemin = -0.02;
	const MPILib::Potential statemax = 0.02;
	const MPILib::Potential densemin = 0;
	const MPILib::Potential densemax = 250;
	MPILib::CanvasParameter par_canvas(tmin,tmax,fmin,fmax,statemin,statemax,densemin,densemax);

	MPILib::report::handler::RootReportHandler handler("two_pop",true,true, par_canvas);
	handler.addNodeToCanvas(id_0);
	handler.addNodeToCanvas(id_1);
	SimulationRunParameter par_run( handler,1000000,0,0.05,1e-04,1e-06,"twopoptest.log",1e-04);
	network.configureSimulation(par_run);
	network.evolve();
	return 0;
}
