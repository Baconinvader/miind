import argparse
import codegen
import sys
import os
import directories

def check_call(argv):

    if len(argv) != 2 :
        raise ValueError
    if argv[1][-4:] == '.xml':
        infile = open(argv[1],'r')
    else:
        raise NameError('No XML file provided')
    fn = os.path.split(argv[1])[1]
    base = fn[:-4]
    fname = base + '.cpp'

    dirname = directories.miind_root() + os.sep + 'apps' + os.sep + base  
    if not os.path.exists(dirname):
        directories.add_executable(fn)
        

    outname  = dirname + os.sep + fname
    outfile= open(outname,'w') 
    return infile, outfile


if __name__ == "__main__":
    parser=argparse.ArgumentParser(description='Converts XML files into executable')

    parser.add_argument('--r', help = 'Remove executable (or an entire directory if the --d option is provided).  generated by the XML file from the build tree. If the XML file has never been used to created an executable, this will be a no-operation', action = 'store_true')
    parser.add_argument('--d', help = 'Provide a packaging directory.',nargs = '?')
    parser.add_argument('xml file', metavar='XML File', nargs = '+', help = 'Will create an entry in the build tree for each XML file, provided the XML file is valid.')
    args = parser.parse_args()
    
    infile, outfile=check_call(sys.argv)
    codegen.generate_outputfile(infile, outfile)
