//Machine-generated by miind.py. Edit at your own risk.

#include <boost/timer/timer.hpp>
#include <GeomLib.hpp>
#include <TwoDLib.hpp>
#include <MPILib/include/MPINetworkCode.hpp>
#include <MPILib/include/RateAlgorithmCode.hpp>
#include <MPILib/include/SimulationRunParameter.hpp>
#include <MPILib/include/report/handler/RootReportHandler.hpp>
#include <MPILib/include/WilsonCowanAlgorithm.hpp>
#include <MPILib/include/PersistantAlgorithm.hpp>
#include <MPILib/include/DelayAlgorithmCode.hpp>
#include <MPILib/include/RateFunctorCode.hpp>
typedef MPILib::MPINetwork<MPILib::DelayedConnection, MPILib::utilities::CircularDistribution> Network;
	// defining variables
int main(int argc, char *argv[]){
	Network network;
	boost::timer::auto_cpu_timer t;

#ifdef ENABLE_MPI
	// initialise the mpi environment this cannot be forwarded to a class
	boost::mpi::environment env(argc, argv);
#endif

	try {	// generating algorithms
	std::vector<std::string> vec_mat_0{"condee2a5ff4-0087-4d69-bae3-c0a223d03693_0_0.05_0_0_.mat"};
	TwoDLib::MeshAlgorithm<DelayedConnection> alg_mesh_0("condee2a5ff4-0087-4d69-bae3-c0a223d03693.model",vec_mat_0,0.00001, 0.0);
	MPILib::Rate RateFunction_1(MPILib::Time);
	MPILib::RateFunctor<DelayedConnection> rate_functor_1(RateFunction_1);
	// generating nodes
	MPILib::NodeId id_0 = network.addNode(alg_mesh_0,MPILib::EXCITATORY_DIRECT);
	MPILib::NodeId id_1 = network.addNode(rate_functor_1,MPILib::NEUTRAL);
	// generating connections
	DelayedConnection con_1_0_0(1,0.05,0);
	network.makeFirstInputOfSecond(id_1,id_0,con_1_0_0);
	// generation simulation parameter
	MPILib::report::handler::RootReportHandler handler("cond.dat",false);

	SimulationRunParameter par_run( handler,1000000,0,0.1,0.001,0.0001,"twopop.log",0.001);
	network.configureSimulation(par_run);
	network.evolve();
	} catch(std::exception& exc){
		std::cout << exc.what() << std::endl;
#ifdef ENABLE_MPI
	//Abort the MPI environment in the correct way :
	env.abort(1);
#endif
	}

	MPILib::utilities::MPIProxy().barrier();
	t.stop();
	if (MPILib::utilities::MPIProxy().getRank() == 0) {

		std::cout << "Overall time spend\n";
		t.report();
	}
	return 0;
}
MPILib::Rate RateFunction_1(MPILib::Time t){
	return 1000.;
}
